/*
 * Copyright (c) 2016 Farooq Khan
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
plugins {
    //id 'net.saliman.cobertura' version '2.3.1'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'idea'
}

apply plugin: "java"
apply plugin: "jacoco"
apply plugin: "eclipse"
apply plugin: "signing"
apply plugin: "maven"

description = 'A pure java JSON based database.'
group = 'io.jsondb'
version = getVersionName()

ext {
  println "Build Version: $version"
}

repositories {
  mavenCentral()
}

dependencies {
  compile "org.slf4j:slf4j-api:1.7.21",
          "com.fasterxml.jackson.core:jackson-annotations:2.9.9",
          "com.fasterxml.jackson.core:jackson-core:2.9.9",
          "com.fasterxml.jackson.core:jackson-databind:2.9.9",
          "com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.9",
          "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.9",
          "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.9",
          "org.javassist:javassist:3.20.0-GA",
          "commons-jxpath:commons-jxpath:1.3",
          "com.google.guava:guava:19.0",
          "commons-beanutils:commons-beanutils:1.9.3"

  testCompile "junit:junit:4.12",
          "org.hamcrest:hamcrest-library:1.3",
          "org.springframework:spring-beans:4.3.3.RELEASE",
          "org.springframework:spring-test:4.3.3.RELEASE"
}

//cobertura.coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

eclipse {
  project {
    name = "${project.name}"
  }
}

eclipseJdt {
  inputFile = file("${rootDir}/buildsupport/eclipsesupport/settings/org.eclipse.jdt.core.prefs")
  doLast {
    copy {
      from "${rootDir}/buildsupport/eclipsesupport/settings/org.eclipse.jdt.ui.prefs"
      into "${projectDir}/.settings"
      fileMode 0644
    }
  }
}

cleanEclipseJdt {
  doFirst {
    delete "${projectDir}/.settings"
  }
}
tasks.eclipse.dependsOn(cleanEclipse)

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar, sourcesJar
}

signing {
  required { gradle.taskGraph.hasTask("uploadArchives") }
  sign configurations.archives
}

uploadArchives {
  //How to publish to MavenCentral: http://weibeld.net/java/publish-to-maven-central.html
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://maven.firstdarkdev.xyz/releases") {
        authentication(userName: System.getenv("MAVEN_USER"), password: System.getenv("MAVEN_PASS"))
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: OSSRH_USERNAME, password: OSSRH_PASSWORD)
      }

      pom.project {
        name 'jsondb-core'
        packaging 'jar'
        // optionally artifactId can be defined here 
        description 'A pure java JSON based database.'
        url 'http://www.jsondb.io'

        scm {
          connection 'scm:git:https://github.com/Jsondb/jsondb-core.git'
          developerConnection 'scm:git:https://github.com/Jsondb/jsondb-core.git'
          url 'scm:git:https://github.com/Jsondb/jsondb-core.git'
        }

        licenses {
          license {
            name 'MIT License'
            url 'https://opensource.org/licenses/MIT'
          }
        }

        developers {
          developer {
            id 'FarooqKhan'
            name 'Farooq Khan'
            email 'FarooqKhan@users.noreply.github.com'
          }
        }
      }
    }
  }
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName() {
  return "1.0.2c";
}
